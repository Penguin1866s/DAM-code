'''Module for the function has_string.'''
def has_string(keyword, buckets):#This function it was generated by me.
    '''Returns the bucket number where each string/ keyword is located.'''
    val_ascid = []
    for char in keyword:
        val_ascid.append(ord(char))
    val_ascid = sum(val_ascid)
    num_bucket = val_ascid % buckets
    assert (num_bucket >= 0) and (num_bucket <= buckets -1) , "The number of the bucket result, isn't in the range between 0 and buckets -1"
    return num_bucket
print(has_string('udacity', 12))


def test_has_function(func, keys, size):#This function it was copied from the course, it's not mine.
    '''Return a list containing the number of keys that hash to each bucket'''
    results = [0] * size
    keys_used = []
    for w in keys:
        if w not in keys_used:
            hv = func(w, size)
            results[hv] += 1
            keys_used.append(w)
    return results
print(test_has_function(has_string, 'udacity', 12))#Output the bucket number where each of the characters of the string are located.

def proof_string(s):
    '''Returns the sum of the ascii values of the characters of the string wich you pass as argument.'''
    val_ascid = []
    for char in s:
        val_ascid.append(ord(char))
    val_ascid = sum(val_ascid)
    return val_ascid
proof_s1 = proof_string('udacity')#The sum of the ascii values of the characters of the string 'udacity'.
print(test_has_function(has_string, chr(proof_s1), 12))#Output the bucket number where the string/ keyword 'udacity' is located.

#Uses of new operators and integrated functions learnt:
#ord:
#print(ord('a'))#output: 97

#chr:
#print(chr(97))#output: a
